script.
  // if browser is resize then search bar is resize
  window.onresize = () => {
    const navbar_padding    = 20 * 2;
    const logo_width        = 160 + navbar_padding;
    const navbar            = document.getElementById('navbar');
    const navbar_width      = navbar.offsetWidth;
    const logo_porcentage   = ( logo_width * 100 ) / navbar_width;
    const search_porcentage = 100 - logo_porcentage - 4;
    const search            = document.getElementById('search');
    search.style.width      = `${search_porcentage}%`;
  }
  window.onresize();
  // consult marvel api rest, render various characters if the parameter
  // character is empty else render various comics by character
  function get_character(character, page) {
    // number of results it will be omitting
    var offset = page ?
      `offset=${page * 10}` :
      '';
    // find a character
    var comics  = character ?
      `&name=${character}` :
      location.hash !== '' && location.hash !== '#!/' ? 
        `&name=${location.hash.replace(/#!\//, '')}` :
        '';
    var results = document.getElementById('results');
    results.innerHTML = '';
    // consult marvel api rest
    fetch(`http://gateway.marvel.com:80/v1/public/characters?limit=10&ts=#{ts}&apikey=#{public}&hash=#{hash}${comics}${offset}`)
      .then(function(response) {
        var contentType = response.headers.get("content-type");
        if(contentType && contentType.includes("application/json")) {
          return response.json();
        }
      })
      .then(result => {
        comics = comics.replace(/&name=/, '');
        if (result.data.count === 0) {
          comics = comics.replace(/&name=/, '');
          results.innerHTML += `<h1 style='text-align=\'center\''>can not find ${comics}</h1>`;
          return;
        }
        if (comics === '') {
          result.data.results.map(comic => {
            location.hash = `#!/${comics}`;
            results.innerHTML += `<div class='card'>
                <img src='${comic.thumbnail.path}.${comic.thumbnail.extension}'/>
                <p>name: ${comic.name}<p>
              </div>
            `;
          })
        }
        else {
          result.data.results.map(comic => {
            var results = document.getElementById('results');
            results.innerHTML = '';
            comic.comics.items.map(item => {
              fetch(`${item.resourceURI}?limit=10&ts=#{ts}&apikey=#{public}&hash=#{hash}`)
                .then(function(response) {
                  var contentType = response.headers.get("content-type");
                  if(contentType && contentType.includes("application/json")) {
                    return response.json();
                  }
                })
                .then(result => {
                  result.data.results.map(comic => {
                    if (comic.pageCount === 0) return;
                    let digital = comic.prices.length > 1 ?
                      `, digital ${comic.prices[1].price}` :
                      '';
                    let description = comic.description ?
                      `<p>${comic.description}</p>` :
                      '';
                    console.log(comic);
                    results.innerHTML += `<div class='card'>
                        <img src='${comic.thumbnail.path}.${comic.thumbnail.extension}'/>
                        <h3>title: ${comic.title}</h3>
                        ${description}
                        <p>prices: print ${comic.prices[0].price}${digital}</p>
                        <p>pages: ${comic.pageCount}</p>
                      </div>
                    `;
                  })
                });
            });
            location.hash = `#!/${comics}`;
          })
        }
      })
  }
  document
    .getElementById('search')
    .onkeypress = (e) => {
      if (e.keyCode == 13) {
        let value = document.getElementById('search').value;
        get_character(value);
        return false;
      }
    }
  window.onhashchange = get_character();
